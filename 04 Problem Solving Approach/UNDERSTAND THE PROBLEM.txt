=> OBJECTIVES
-> Define what an algorithm is
-> Devise a plan to solve algorithms
-> Compare and contrast problem solving patterns including frequency counters, two pointer problems and divide and conquer
---------------------------------------------------------------------------
HOW DO YOU IMPROVE?

1. Devise a plan for solving problems
2. Master common problem solving patterns
---------------------------------------------------------------------------
Q. Why do I need to know this?

Ans. Almost everything that you do in programming involves some kind of algorithm!
    It's the foundation for being a successful problem solving and developer
Also...
INTERVIEWS
---------------------------------------------------------------------------
PROBLEM SOLVING

= Understand the Problem
= Explore Concrete Examples
= Break It Down
= Solve/Simplify
= Look Back and Refactor
---------------------------------------------------------------------------
UNDERSTAND THE PROBLEM

1. Can I restate the problem in my own words?
2. What are the inputs that go into the problem?
3. What are the outputs that should come from the solution to the problem?
4. Can the outputs be determined from the inputs? In other words, do I have enough information to solve the problem? (You may not be able to answer this question until you set about solving the problem. That's okay; it's still worth considering the question at this early stage.)
5. How should I label the important pieces of data that are a part of the problem?